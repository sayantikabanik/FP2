# -*- coding: utf-8 -*-
"""FP2_V2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGX3ITfZQtE24sQWYRGyU5E8TXSSCtO3
"""

!pip install evidently

!pip install --upgrade PyCaret

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import statsmodels.api as sm
import numpy as np 
import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error
import imageio
import os
from statsmodels.graphics.tsaplots import plot_acf

!pip install explainerdashboard

#from google.colab import drive
#drive.mount('/content/drive')

agri_data=pd.read_excel('/content/drive/MyDrive/Agri/FPData v1.2.xlsx')
agri_data.head()

agri_data.dtypes

# extract month and year from dates
agri_data['Month'] = [i.month for i in agri_data['Date']]
agri_data['year'] = [i.year for i in agri_data['Date']]
#agri_data['flag'] = pd.Series(np.where(agri_data['Date'] >= np.datetime64('2020-03-03'), 1, 0)) #flag for COVID-19
agri_data.head()

agri_data.columns

target='Monthly Price'

#agri_data = agri_data.drop(columns=['COMM_CODE'])
#agri_data.columns

#agri_data = agri_data.drop(columns=['COMM_WT'])
#agri_data.columns

agri_data.set_index('Date', inplace=True)
agri_data.head()

# Filtering out records in the dataframe with NULLs in Monthly Price
unknown_price_df=agri_data[agri_data['Monthly Price'].isna()]
# Filtering out records for June, 2021 to create a forecast dataframe
forecast_agri_df=unknown_price_df[(unknown_price_df['year']>2021) |((unknown_price_df['year']==2021) & (unknown_price_df['Month']>6))]
forecast_agri_index=forecast_agri_df.index  #indexes of the records in forecast dataframe
#Eliminating the records that need to be appear in forecast data from training data
agri_data=agri_data.drop(index=forecast_agri_index)

# split data into train-test set
train = agri_data[agri_data['year'] < 2020]
test = agri_data[agri_data['year'] >= 2020]
#check shape
train.shape, test.shape

plt.figure(figsize=(20,10))
plt.xlabel('date')
plt.ylabel('Monthly Price')
plt.plot(train.index,train['Monthly Price'],label='train')
plt.plot(test.index,test['Monthly Price'],label='test')
plt.legend()
plt.show()

train.columns

from pycaret.regression import *

reg = setup(data = train, 
             target = 'Monthly Price',
             numeric_imputation = 'mean',
             categorical_features = ['COMM_NAME','Month','year','COMM_CATEGORY'], use_gpu=True, combine_rare_levels = True, rare_level_threshold = 0.1,ignore_features=['COMM_CODE','COMM_WT'],
             silent = True,remove_multicollinearity = True, multicollinearity_threshold = 0.95,
            data_split_shuffle = False,log_experiment = True,experiment_name='Midreview_1',log_plots = True,log_data = True)

#!pip install autoviz

#eda()

# returns best models - takes a little time to run
top3 = compare_models(n_select = 3)

best = compare_models(sort = 'RMSE')

#we create a model using light gbm
lightgbm = create_model('lightgbm')

tuned_lightgbm = tune_model(lightgbm)

dashboard(lightgbm, display_format='inline')

predict_model(tuned_lightgbm);

final_lightgbm = finalize_model(tuned_lightgbm)

#Final Light Gradient Boosting Machine parameters for deployment
print(final_lightgbm)

predict_model(final_lightgbm);

interpret_model(final_lightgbm)

#Appending the test and forecast data
test=test.reset_index()
forecast_agri_df=forecast_agri_df.reset_index()
forecast_agri_df=forecast_agri_df.append(test,ignore_index=True)
#Sorting the forecast data by Date
forecast_agri_df=forecast_agri_df.sort_values(by='Date')
# Setting Date column as index to the forecast data
forecast_agri_df=forecast_agri_df.set_index('Date')

unseen_predictions = predict_model(final_lightgbm, data=forecast_agri_df)
unseen_predictions.head()
unseen_predictions.loc[unseen_predictions['Label'] < 0, 'Label'] = 0 #removing any negative values

## 22-01-2022: Changes by Anuraag
# Forecast Output from 2020-01-01 to 2023-03-01
# Label column denotes the forecasted prices
unseen_predictions[['COMM_NAME','COMM_CATEGORY','Monthly Price','Label']]

def plot_series(time, series,i, format="-", start=0, end=None):
    #plt.figure(figsize=(20,10))
    plt.plot(time[start:end], series[start:end], format,label=i)
    plt.xlabel("Date")
    plt.ylabel("Monthly Price (Rupees)")
    plt.legend()

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime

plt.figure(figsize=(20,10))
plot_series(forecast_agri_df.index, forecast_agri_df['Monthly Price'],"True")
#plot_series(train['ds'],train['y'])
plot_series(forecast_agri_df.index, unseen_predictions['Label'],"Baseline")

gbr = create_model('gbr', verbose = False)
lightgbm = create_model('lightgbm', verbose = False)
br=create_model('br', verbose = False)

tuned_gbr = tune_model(gbr)

tuned_lightgbm = tune_model(lightgbm)

tuned_br = tune_model(br)

blend_specific = blend_models(estimator_list = [tuned_lightgbm,tuned_gbr,tuned_br])

predict_model(blend_specific)

final_model = finalize_model(blend_specific)

unseen_predictions_2 = predict_model(final_model, data=forecast_agri_df, round=0)
unseen_predictions_2.loc[unseen_predictions_2['Label'] < 0, 'Label'] = 0
unseen_predictions_2.head()

plt.figure(figsize=(20,5))
plot_series(forecast_agri_df.index, forecast_agri_df['Monthly Price'],"True")
plot_series(forecast_agri_df.index, unseen_predictions_2['Label'],'Blend')

stack_1 = stack_models([tuned_lightgbm,tuned_gbr,tuned_br])
predict_model(stack_1);
final_stack_1 = finalize_model(stack_1)
unseen_predictions_3 = predict_model(final_stack_1, data=forecast_agri_df, round=1)

plt.figure(figsize=(20,5))
plot_series(forecast_agri_df.index, forecast_agri_df['Monthly Price'],"True")
plot_series(forecast_agri_df.index, unseen_predictions['Label'],'Baseline')
plot_series(forecast_agri_df.index, unseen_predictions_2['Label'],'Blend')

!pip install fastapi

!pip install uvicorn

!pip install gradio

!pip install fastapi nest-asyncio pyngrok uvicorn

create_api(final_lightgbm, 'my_first_api')
# Run the API
!python my_first_api.py

create_docker('my_first_docker')

# select best model 
best2 = automl(optimize = 'RMSE')

best2

best_model_results = pull()

best_model_results

create_app(lightgbm)

!pip install mlflow ui
!pip install mlflow
# run mlflow server (notebook)
#!mlflow ui

logs = get_logs(save=True) # To save csv in working directory

logs

print(best)

#!pip install evidently==0.1.41.dev0

preds = predict_model(final_lightgbm, drift_report = True)

#!pip install mlflow --quiet
#!pip install pyngrok --quiet

!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1
# https://pypi.python.org/pypi/libarchive
!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive
# https://pypi.python.org/pypi/pydot
!apt-get -qq install -y graphviz && pip install pydot
import pydot
!pip install cartopy
import cartopy

!pip install pyngrok

#Check whether MLFlow is installed or not
!mlflow

from pyngrok import ngrok
# Terminate open tunnels if exist
ngrok.kill()

# Setting the authtoken (optional)
# Get your authtoken from https://dashboard.ngrok.com/auth
NGROK_AUTH_TOKEN = "232s9CSB1KwwGMdmyS7xz1Lxn3o_maAhMo1uwUiDvhg6QR5w"
ngrok.set_auth_token(NGROK_AUTH_TOKEN)

# Open an HTTPs tunnel on port 5000 for http://localhost:5000
ngrok_tunnel = ngrok.connect(addr="5000", proto="http", bind_tls=True)
print("MLflow Tracking UI:", ngrok_tunnel.public_url)

!mlflow ui

print('\n'.join(f'{m.__name__}=={m.__version__}' for m in globals().values() if getattr(m, '__version__', None)))

save_model(best,'final_model')

l=load_model('/content/final_model')

print(l)

predict_model(l,data=agri_data)

help(deploy_model)

save_experiment('experiment_07032020')

